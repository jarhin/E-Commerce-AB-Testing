library(lubridate)
library(infer)
library(rstatix)
library(tidyr)
library(broom)
# set path
here()
options(dplyr.summarise.inform = FALSE)
ab_test_data = read_csv(
here("Data", "ab_test.csv"),
col_types = cols(
id = col_integer(),
time = col_time(),
con_treat = col_character(),
page = col_character(),
converted = col_double()
)
)
head(ab_test_data)
countries_ab = read_csv(
here("Data", "countries_ab.csv"),
col_types = cols(
id = col_integer(),
country = col_character()
)
)
head(countries_ab)
ab_merged <- ab_test_data %>%
left_join(
countries_ab,
by = "id"
) %>%
mutate(
time_period = hms(time),
time_seconds = period_to_seconds(time_period)
)
ab_merged %>%
group_by(country, con_treat, page) %>%
summarise(
mean_converted =  mean(converted),
mean_time_homepage = mean(time_seconds)
) %>%
ungroup()
ab_merged %>%
group_by(page) %>%
summarise(
number_id = n_distinct(id),
mean_converted =  mean(converted),
sd_converted =  sd(converted),
mean_time_homepage = mean(time_seconds)
)
ab_merged %>%
dplyr::select(page, converted) %>%
infer::t_test(
formula = converted ~ page,
order = c("new_page", "old_page"),
alternative = "two-sided"
)
ab_merged %>%
group_by(con_treat, page, converted) %>%
summarise(count_id = n()) %>%
ungroup()
ab_merged %>%
dplyr::select(con_treat, converted) %>%
infer::t_test(
formula = converted ~ con_treat,
order = c("treatment", "control"),
alternative = "two-sided"
)
library(tidyr)
library(broom)
library(purrr)
library(dplyr)
ab_merged %>%
group_nest(page, country) %>%
mutate(
t.test = map(
.x = data,
.f = \(x){
t.test(x$converted ~ x$con_treat) %>%
tidy()
})
) %>%
dplyr::select(-data) %>%
unnest(cols = t.test)
?parse_factor
ab_merged <- ab_test_data %>%
left_join(
countries_ab,
by = "id"
) %>%
mutate(
time_period = hms(time),
time_seconds = period_to_seconds(time_period),
con_treat = parse_factor(con_treat, levels = c("new_page", "old_page"), ordered = FALSE)
)
ab_merged
ab_merged <- ab_test_data %>%
left_join(
countries_ab,
by = "id"
) %>%
mutate(
time_period = hms(time),
time_seconds = period_to_seconds(time_period),
con_treat = parse_factor(con_treat, levels = c("control", "treatment"), ordered = FALSE),
page = parse_factor(page, levels = c("new_page", "old_page"), ordered = FALSE)
)
ab_merged
head(ab_merged)
ab_merged %>%
group_by(country, con_treat, page) %>%
summarise(
mean_converted =  mean(converted),
mean_time_homepage = mean(time_seconds)
) %>%
ungroup()
agg_small_groups <- ab_merged %>%
group_by(country, con_treat, page) %>%
summarise(
mean_converted =  mean(converted),
mean_time_homepage = mean(time_seconds)
) %>%
ungroup()
agg_small_groups
ab_merged %>%
group_by(con_treat) %>%
summarise(
mean_converted =  mean(converted),
mean_time_homepage = mean(time_seconds)
) %>%
ungroup()
# visuals
library(ggplot2)
library(scales)
ab_merged %>%
group_by(con_treat) %>%
summarise(
mean_converted =  mean(converted),
mean_time_homepage = mean(time_seconds)
) %>%
ungroup() %>%
ggplot(aes(x = factor(1), y = mean_converted, colour = con_treat)) +
geom_bar()
ab_merged %>%
group_by(con_treat) %>%
summarise(
mean_converted =  mean(converted),
mean_time_homepage = mean(time_seconds)
) %>%
ungroup() %>%
ggplot(aes(x = factor(1), y = mean_converted, colour = con_treat)) +
geom_col()
ab_merged %>%
group_by(con_treat) %>%
summarise(
mean_converted =  mean(converted),
mean_time_homepage = mean(time_seconds)
) %>%
ungroup() %>%
ggplot(aes(x = con_treat, y = mean_converted)) +
geom_col()
ab_merged %>%
ggplot(aes(x = converted, colour = converted)) +
geom_histogram()
ab_merged %>%
ggplot(aes(x = converted, colour = converted)) +
geom_density()
ab_merged %>%
ggplot(aes(x = converted, fill = converted)) +
geom_density()
ab_merged %>%
ggplot(aes(x = converted, colour = con_treat)) +
geom_density()
ab_merged %>%
ggplot(aes(x = converted, colour = con_treat)) +
geom_histogram()
library(readr)
library(here)
library(dplyr)
library(magrittr)
library(lubridate)
library(infer)
library(rstatix)
library(tidyr)
library(broom)
# visuals
library(ggplot2)
library(scales)
# set path
here()
options(dplyr.summarise.inform = FALSE)
ab_test_data = read_csv(
here("Data", "ab_test.csv"),
col_types = cols(
id = col_integer(),
time = col_time(),
con_treat = col_character(),
page = col_character(),
converted = col_double()
)
)
head(ab_test_data)
countries_ab = read_csv(
here("Data", "countries_ab.csv"),
col_types = cols(
id = col_integer(),
country = col_character()
)
)
head(countries_ab)
ab_merged <- ab_test_data %>%
left_join(
countries_ab,
by = "id"
) %>%
mutate(
time_period = hms(time),
time_seconds = period_to_seconds(time_period),
con_treat = parse_factor(con_treat, levels = c("control", "treatment"), ordered = FALSE),
page = parse_factor(page, levels = c("new_page", "old_page"), ordered = FALSE),
converted_factor = parse_factor(converted, levels = c(0, 1), ordered = TRUE),
)
ab_test_data
ab_merged <- ab_test_data %>%
left_join(
countries_ab,
by = "id"
) %>%
mutate(
time_period = hms(time),
time_seconds = period_to_seconds(time_period),
con_treat = parse_factor(con_treat, levels = c("control", "treatment"), ordered = FALSE),
page = parse_factor(page, levels = c("new_page", "old_page"), ordered = FALSE),
converted_factor = converted %>% as.character(.) %>% parse_factor(., levels = c("0", "1"), ordered = TRUE),
)
head(ab_merged)
ab_merged %>%
group_by(con_treat, page, country, converted_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
ungroup()
library(forcats)
?fct_relabel
ab_merged <- ab_test_data %>%
left_join(
countries_ab,
by = "id"
) %>%
mutate(
time_period = hms(time),
time_seconds = period_to_seconds(time_period),
con_treat = parse_factor(con_treat, levels = c("control", "treatment"), ordered = FALSE),
page = parse_factor(page, levels = c("new_page", "old_page"), ordered = FALSE),
converted_factor = converted %>% as.character(.) %>% parse_factor(., levels = c("0", "1"), ordered = TRUE) %>% fct_recode(., "0" = "not_converted", "1" = "converted"),
)
head(ab_merged)
ab_merged <- ab_test_data %>%
left_join(
countries_ab,
by = "id"
) %>%
mutate(
time_period = hms(time),
time_seconds = period_to_seconds(time_period),
con_treat = parse_factor(con_treat, levels = c("control", "treatment"), ordered = FALSE),
page = parse_factor(page, levels = c("new_page", "old_page"), ordered = FALSE),
converted_factor = converted %>% as.character(.) %>% parse_factor(., levels = c("0", "1"), ordered = TRUE) %>% fct_recode(., "not_converted" = "0", "converted" = "1"),
)
head(ab_merged)
ab_merged <- ab_test_data %>%
left_join(
countries_ab,
by = "id"
) %>%
mutate(
time_period = hms(time),
time_seconds = period_to_seconds(time_period),
con_treat = parse_factor(con_treat, levels = c("control", "treatment"), ordered = FALSE),
page = parse_factor(page, levels = c("new_page", "old_page"), ordered = FALSE),
conversion_factor = converted %>% as.character(.) %>% parse_factor(., levels = c("0", "1"), ordered = TRUE) %>% fct_recode(., "no" = "0", "yes" = "1"),
)
head(ab_merged)
ab_merged %>%
group_by(con_treat, page, country, converted_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
ungroup()
ab_merged %>%
group_by(con_treat, page, country, conversion_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
ungroup()
cross_tab_counts <- ab_merged %>%
group_by(con_treat, page, country, conversion_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
ungroup()
install.packages("ggmosaic")
library(ggmosaic)
cross_tab_counts
cross_tab_counts
?facet_grid
cross_tab_counts <- ab_merged %>%
group_by(con_treat, page, country, conversion_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
ungroup()
cross_tab_counts %>%
ggplot(aes(x = conversion_factor, y = number_id)) +
geom_col() +
facet_grid(con_treat + page ~ country)
cross_tab_counts
?pivot_wider
cross_tab_counts %>%
pivot_wider(names_from = conversion_factor, values_from = number_id)
cross_tab_counts %>%
pivot_wider(names_from = conversion_factor, values_from = number_id) %>%
mutate(conversion_ratio = yes / (no + yes))
cross_tab_counts
cross_tab_counts <- ab_merged %>%
group_by(con_treat, page, country, conversion_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
mutate(conversion_factor_proportion = number_id / sum(number_id)) %>%
ungroup()
cross_tab_counts %>%
ggplot(aes(x = conversion_factor, y = number_id)) +
geom_col() +
facet_grid(con_treat + page ~ country)
cross_tab_counts
cross_tab_counts %>%
ggplot(aes(x = conversion_factor, y = conversion_factor_proportion)) +
geom_col() +
facet_grid(con_treat + page ~ country)
cross_tab_counts %>%
ggplot(aes(x = conversion_factor, y = conversion_factor_proportion)) +
geom_col() +
facet_grid(country ~ con_treat + page)
ab_merged %>%
group_by(conversion_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
mutate(conversion_factor_proportion = number_id / sum(number_id)) %>%
ungroup() %>%
ggplot(aes(x = conversion_factor, y = conversion_factor_proportion)) +
geom_col()
ab_merged %>%
group_by(conversion_factor, con_treat) %>%
summarise(
number_id = n_distinct(id)
) %>%
mutate(conversion_factor_proportion = number_id / sum(number_id)) %>%
ungroup() %>%
ggplot(aes(x = conversion_factor, y = conversion_factor_proportion)) +
geom_col() +
facet_grid(con_treat ~ .)
ab_merged %>%
group_by(conversion_factor, page) %>%
summarise(
number_id = n_distinct(id)
) %>%
mutate(conversion_factor_proportion = number_id / sum(number_id)) %>%
ungroup() %>%
ggplot(aes(x = conversion_factor, y = conversion_factor_proportion)) +
geom_col() +
facet_grid(page ~ .)
ab_merged %>%
group_by(conversion_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
mutate(conversion_factor_proportion = number_id / sum(number_id)) %>%
ungroup() %>%
ggplot(aes(x = conversion_factor, y = conversion_factor_proportion)) +
geom_col()
?stat_count
ab_merged %>%
group_by(conversion_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
mutate(conversion_factor_proportion = number_id / sum(number_id)) %>%
ungroup() %>%
ggplot(aes(x = conversion_factor, y = conversion_factor_proportion)) +
geom_col() +
scale_y_continuous(name = "Proportion\n", labels = percent) +
scale_x_discrete("\nConversion")
ab_merged %>%
group_by(conversion_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
mutate(conversion_factor_proportion = number_id / sum(number_id)) %>%
ungroup() %>%
ggplot(aes(x = conversion_factor, y = conversion_factor_proportion)) +
geom_col() +
scale_y_continuous(name = "Proportion\n", labels = percent) +
scale_x_discrete("\nConversion") +
ggtitle("Proportion of Users who make conversion")
ab_merged
ab_merged %>%
group_by(page, conversion_factor) %>%
summarise(
number_id = n_distinct(id)
) %>%
mutate(conversion_factor_proportion = number_id / sum(number_id)) %>%
ungroup() %>%
ggplot(aes(x = conversion_factor, y = conversion_factor_proportion)) +
geom_col() +
scale_y_continuous(name = "Proportion\n", labels = percent) +
scale_x_discrete("\nConversion") +
ggtitle("Proportion of Users who make conversion")
ab_merged %>%
ggplot(aes(x = page, fill = conversion_factor)) +
geom_bar() #+
# scale_y_continuous(name = "Proportion\n", labels = percent) +
# scale_x_discrete("\nConversion") +
# ggtitle("Proportion of Users who make conversion")
ab_merged %>%
count(page, conversion_factor)
ab_merged %>%
count(page, con_treat, conversion_factor)
ab_merged %>%
count(page, con_treat, conversion_factor)
ab_merged %>%
ggplot(aes(x = page, fill = conversion_factor)) +
geom_bar() +
facet_grid(vars(con_treat))
conversion_page_tab <- table(ab_merged$page, ab_merged$conversion_factor)
conversion_page_tab
chisq.test(conversion_page_tab)
ab_merged
ab_merged %>%
dplyr::select(conversion_factor, time_seconds)
groups_1 <- ab_merged$time_seconds[ab_merged$conversion_factor == "no"]
groups_2 <- ab_merged$time_seconds[ab_merged$conversion_factor == "yes"]
t.test(groups_1, groups_2)
set.seed(1234)
boostraped_ab <- ab_merged %>%
specify(conversion_factor ~ page, success = "yes") %>%
hypothesise(null = "independence") %>%
generate(reps = 500, type = "bootstrap")
boostraped_ab %>%
?calculate
conversion_order <- c("no", "yes")
set.seed(1234)
boostraped_ab <- conversion_vs_page %>%
generate(reps = 500, type = "bootstrap")
?specify
ab_merged
conversion_order <- c("no", "yes")
conversion_vs_page <- ab_merged %>%
specify(conversion_factor ~ page)
conversion_order <- c("no", "yes")
conversion_vs_page <- ab_merged %>%
specify(conversion_factor ~ page, success = "yes")
set.seed(1234)
boostraped_ab <- conversion_vs_page %>%
generate(reps = 500, type = "bootstrap")
observed_conversion <- conversion_vs_page %>%
calculate(stat = "chisq", order = conversion_order)
conversion_vs_page
conversion_vs_page
?calculate
conversion_vs_page %>%
calculate(stat = "chisq", order = conversion_order)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
conversion_vs_page
page_order <- c("old_page", "new_page")
observed_conversion <- conversion_vs_page %>%
calculate(stat = "chisq", order = page_order)
conversion_page_chisq <- boostraped_ab %>%
calculate(stat = "chisq", order = page_order)
get_ci(conversion_page_chisq)
visualise(conversion_page_chisq) +
shade_ci(get_ci(conversion_page_chisq))
page_order <- c("new_page", "old_page",)
page_order <- c("new_page", "old_page")
conversion_vs_page <- ab_merged %>%
specify(conversion_factor ~ page, success = "yes")
set.seed(1234)
boostraped_ab <- conversion_vs_page %>%
generate(reps = 500, type = "bootstrap")
observed_conversion <- conversion_vs_page %>%
calculate(stat = "chisq", order = page_order)
conversion_page_chisq <- boostraped_ab %>%
calculate(stat = "chisq", order = page_order)
get_ci(conversion_page_chisq)
visualise(conversion_page_chisq) +
shade_ci(get_ci(conversion_page_chisq))
page_order <- c("old_page", "new_page")
conversion_vs_page <- ab_merged %>%
specify(conversion_factor ~ page, success = "yes")
set.seed(1234)
boostraped_ab <- conversion_vs_page %>%
generate(reps = 500, type = "bootstrap")
observed_conversion <- conversion_vs_page %>%
calculate(stat = "chisq", order = page_order)
conversion_page_chisq <- boostraped_ab %>%
calculate(stat = "chisq", order = page_order)
get_ci(conversion_page_chisq)
visualise(conversion_page_chisq) +
shade_ci(get_ci(conversion_page_chisq))
